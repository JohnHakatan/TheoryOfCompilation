%{
/* Declarations section */

#include <stdlib.h>
#include <iostream>
#include "output.hpp"
using namespace output;
using namespace std;

int yyerror(const char * message);
extern int yylineno;
extern int yylex(); 
%}

/* Token declarations section */
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%right IF;
%right WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%left SC;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left EQUALITY_OP;
%left RELATIONAL_OP;
%left ADDITIVE_BINOP;
%left MULTIPLICATIVE_BINOP;
%right NOT;
%left RPAREN;
%right LPAREN;
%left RBRACE;
%right LBRACE;
%nonassoc ELSE;

%%

/* Rules */
Program:
    Statements { output::printProductionRule(1); };

Statements:
    Statement { output::printProductionRule(2); }
    | Statements Statement { output::printProductionRule(3); };

Statement:
    LBRACE Statements RBRACE { output::printProductionRule(4); }
    | Type ID SC { output::printProductionRule(5); }
    | Type ID ASSIGN Exp SC { output::printProductionRule(6); }
    | ID ASSIGN Exp SC { output::printProductionRule(7); }
    | Call SC { output::printProductionRule(8); }
    | RETURN SC { output::printProductionRule(9); }
    | IF LPAREN Exp RPAREN Statement { output::printProductionRule(10); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement { output::printProductionRule(11); }
    | WHILE LPAREN Exp RPAREN Statement { output::printProductionRule(12); }
    | BREAK SC { output::printProductionRule(13); }
    | CONTINUE SC { output::printProductionRule(14); };

Call:
    ID LPAREN Exp RPAREN { output::printProductionRule(15); };

Type:
    INT { output::printProductionRule(16); }
    | BYTE { output::printProductionRule(17); }
    | BOOL { output::printProductionRule(18); };

Exp:
    LPAREN Exp RPAREN { output::printProductionRule(19); }
    | Exp ADDITIVE_BINOP Exp { output::printProductionRule(20); }
    | Exp MULTIPLICATIVE_BINOP Exp { output::printProductionRule(20); }
    | ID { output::printProductionRule(21); }
    | Call { output::printProductionRule(22); }
    | NUM { output::printProductionRule(23); }
    | NUM B { output::printProductionRule(24); }
    | STRING { output::printProductionRule(25); }
    | TRUE { output::printProductionRule(26); }
    | FALSE { output::printProductionRule(27); }
    | NOT Exp { output::printProductionRule(28); }
    | Exp AND Exp { output::printProductionRule(29); }
    | Exp OR Exp { output::printProductionRule(30); }
    | Exp EQUALITY_OP Exp { output::printProductionRule(31); }
    | Exp RELATIONAL_OP Exp { output::printProductionRule(31); }
    | LPAREN Type RPAREN Exp { output::printProductionRule(32); };

%%



/* Routime */
int main(){
    return yyparse();
}

int yyerror(const char* message){
    errorSyn(yylineno);
    exit(1);
}
        
